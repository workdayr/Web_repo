"""
Django settings for web project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+zixk3(d1gvw66$)nsed=0m!31&&#@*9qpnm8sl0=m=#@&x4q@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Web_repo',
    'corsheaders',
    'rest_framework',  # Agregar Django REST Framework
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'web',  # Reemplaza 'web' con el nombre correcto de tu aplicaci√≥n
]
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_USE_TLS = False
EMAIL_HOST_USER = 'B.Pricessssss@gmail.com'    
EMAIL_HOST_PASSWORD = 'cdnu kwfg slxu khrk'        
DEFAULT_FROM_EMAIL = 'B.Pricessssss@gmail.com'   


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', 
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config('POSTGRES_DB', default='webapp_development'),
        'USER': config('POSTGRES_USER', default='webapp_user'),
        'PASSWORD': config('POSTGRES_PASSWORD', default='Str0ngAndUniqueP@sswOrd123'),
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTH_USER_MODEL = 'Web_repo.User' 
AUTHENTICATION_BACKENDS = ['web.auth_backends.CustomAuthBackend']


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        "Web_repo.authentication.CookieJWTAuthentication",
    ),
}

# Cookie Settings
SESSION_COOKIE_SECURE = False  # Should match the protocol (False for HTTP, True for HTTPS)
SESSION_COOKIE_SAMESITE = "None"  # Change from "Lax" to "None"
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7  # 7 days
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  

CSRF_COOKIE_SECURE = True  # Should match the protocol
CSRF_COOKIE_SAMESITE = "None"  # Ensure compatibility with cross-origin requests

# JWT Token Settings
SIMPLE_JWT = {
    'AUTH_COOKIE': 'access_token',  # Cookie name for the access token. Enables cookies if value is set.
    'AUTH_COOKIE_DOMAIN': None,      # Domain for the access token cookie. None for standard domain cookie.
    'AUTH_COOKIE_SECURE': True,      # Whether the access token cookie should be secure (HTTPS only).
    'AUTH_COOKIE_HTTP_ONLY': True,  # HTTP-only flag for the access token cookie (not accessible by JavaScript).
    'AUTH_COOKIE_PATH': '/',        # Path for the access token cookie.
    'AUTH_COOKIE_SAMESITE': 'None',  # SameSite attribute for the access token cookie ('Lax', 'Strict', 'None').

    'REFRESH_COOKIE': 'refresh_token',  # Cookie name for the refresh token. Enables cookies if value is set.
    'REFRESH_COOKIE_DOMAIN': None,       # Domain for the refresh token cookie. None for standard domain cookie.
    'REFRESH_COOKIE_SECURE': True,       # Whether the refresh token cookie should be secure (HTTPS only).
    'REFRESH_COOKIE_HTTP_ONLY': True,   # HTTP-only flag for the refresh token cookie (not accessible by JavaScript).
    'REFRESH_COOKIE_PATH': '/',         # Path for the refresh token cookie.
    'REFRESH_COOKIE_SAMESITE': 'None',   # SameSite attribute for the refresh token cookie ('Lax', 'Strict', 'None').

    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # Time before access token expires
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # Time before refresh token expires

    'ROTATE_REFRESH_TOKENS': True,

    'USER_ID_FIELD': 'user_id',
}

# Ensure Django Sends Secure Cookies for Refresh Token
SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
}


